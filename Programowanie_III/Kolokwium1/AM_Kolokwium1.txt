Andrzej Manderla AM305303 Kolokwium1
Zad 1.
import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        try {
            System.out.print("Podaj promień podstawy stożka: ");
            double r = scanner.nextDouble();

            System.out.print("Podaj tworzącą stożka: ");
            double l = scanner.nextDouble();

            if (r <= 0 || l <= 0) {
                System.out.println("Podano niepoprawne dane. Promień i tworząca muszą być dodatnie.");
            } else {
                // Obliczenia
                double surfaceArea = Math.PI * r * (r + Math.sqrt(r * r + l * l));
                double velocity = (1.0 / 3.0) * Math.PI * r * r * l;

                // Wyświetlenie wyników
                System.out.println("Pole powierzchni stożka: " + surfaceArea);
                System.out.println("Objętość stożka: " + velocity);
            }
        } catch (Exception e) {
            System.out.println("Wprowadzono niepoprawne dane. Upewnij się, że podano liczby.");
        } finally {
            scanner.close();
        }
    }
}

Zad 2.
import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        try {
            System.out.println("Podaj rozmiar ciągu liczb: ");
            int len = scanner.nextInt();

            double[] tab = new double[len];

            System.out.println("Podaj elementy ciągu: ");
            for (int i = 0; i < len; i++) {
                tab[i] = scanner.nextDouble();
            }

            Algorytm algorytm = new Algorytm();
            int maxIndex = algorytm.findMaxIndex(tab);
            System.out.println("Indeks najmniejszego elementu: " + maxIndex);

        } catch (Exception e) {
            System.out.println("Wystąpił błąd. Sprawdź, czy wprowadziłeś poprawne dane.");
        } finally {
            scanner.close();
        }
    }
}

class Algorytm {
    public int findMaxIndex(double[] tab) {
        if(tab.length<=0)
            return -1;
        int tmp = 0;
        double tmp1 = tab[0];
        for(int i = 1;  i< tab.length; i++)
        {
            if(tmp1<tab[i])
            {
                tmp = i;
                tmp1 = tab[i];
            }
        }
        return tmp;
    }
}

Zad 3.
import java.io.IOException;
import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Enter the file path: ");
        String filePath = scanner.nextLine();
        FileHandler fileReader = new FileHandler();
        try {

            fileReader.readFileContent(filePath);
        } catch (IOException e) {
            System.err.println("Error reading the file: " + e.getMessage());
        } finally {
            scanner.close();
        }
    }


}

import java.io.BufferedReader;
import java.io.IOException;

public class FileHandler {
    public void readFileContent(String filePath) throws IOException {
        try (BufferedReader reader = new BufferedReader(new java.io.FileReader(filePath))) {
            String line;
            while ((line = reader.readLine()) != null) {
                System.out.println(line);
            }
        } catch (IOException e) {
            throw new IOException("Error reading the file", e);
        }
    }
}


Zad 4.
import java.util.Arrays;

public class Main {
    public static void main(String[] args) {
        Dane[] employees = {
                new Dane(1, "Nowak", 5000),
                new Dane(2, "Kowalski", 4000),
                new Dane(3, "Zając", 6000),
                // Dodaj więcej pracowników według potrzeb
        };

        // Sortowanie za pomocą metody compareTo
        Arrays.sort(employees);

        // Wydruk posortowanych pracowników
        for (Dane employee : employees) {
            System.out.println(employee);
        }
    }
}

public class Dane implements Comparable<Dane> {
    private int id;
    private String lastName;
    private double salary;

    public Dane(int id, String lastName, double salary) {
        this.id = id;
        this.lastName = lastName;
        this.salary = salary;
    }

    @Override
    public int compareTo(Dane other) {
        // Porównanie wg. pola salary
        if (this.salary < other.salary) {
            return -1;
        } else if (this.salary > other.salary) {
            return 1;
        } else {
            // W przypadku równego wynagrodzenia sortujemy wg. pola lastName
            return this.lastName.compareTo(other.lastName);
        }
    }

    @Override
    public String toString() {
        return "Dane{" +
                "id=" + id +
                ", lastName='" + lastName + '\'' +
                ", salary=" + salary +
                '}';
    }
}

Zad 5.
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

public class Main {
    public static void main(String[] args) {
        List<Muzyka> albumList= new ArrayList<>();
        albumList.add(new Muzyka("ęAbbey Road", 49.99));
        albumList.add(new Muzyka("ąBack in Black", 39.99));
        albumList.add(new Muzyka("Coda", 29.99));
        // Dodaj więcej albumów według potrzeb

        // Sortowanie za pomocą metody compareTo
        Collections.sort(albumList);

        // Wydruk posortowanej listy albumów
        for (Muzyka album : albumList) {
            System.out.println(album);
        }
    }
}

import java.text.Collator;
import java.util.Locale;

public class Muzyka implements Comparable<Muzyka> {
    private String title;
    private double prize;

    public Muzyka(String tytul, double cena) {
        this.title = tytul;
        this.prize = cena;
    }

    @Override
    public int compareTo(Muzyka other) {
        Locale locale = new Locale("pl","PL");
        Collator col = Collator.getInstance(locale);
        col.setStrength(Collator.PRIMARY);
        return col.compare(this.title, other.title);
    }

    @Override
    public String toString() {
        return "Muzyka{" +
                "tytul='" + title + '\'' +
                ", cena=" + prize +
                '}';
    }
}
